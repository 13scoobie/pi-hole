#!/usr/bin/env python3
# Copyright (c) 2016 Jacob Salmela
# Pi-hole: a DNS based ad-blocker [https://www.pi-hole.net]
#
# Provide a command line interface for using Pi-hole
#
# The Pi-Hole is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.


# IMPORTS


import argparse
import pihole_vars
import gravity
import updatePihole
import updateDashboard
import whitelist
import blacklist
import debug
import flush
import chronometer
import setupLCD


# FUNCTIONS


def choice_help(context):
    pass


def choice_update():
    updatePihole.main()
    updateDashboard.main()


def choice_uninstall():
    pass


def choice_gravity():
    gravity.main()


def choice_whitelist():
    whitelist.main()


def choice_blacklist():
    blacklist.main()


def choice_flush():
    flush.main()


def choice_lcd():
    setupLCD.main()


def choice_chronometer():
    chronometer.main()


def main():
    # Sub-space scanners to parse arguments
    parser = argparse.ArgumentParser(
        description="Control Pi-hole from a single command",
        epilog="(c) 2014-2016 by Jacob Salmela.  http://jacobsalmela.com",
        formatter_class=lambda prog: pihole_vars.CustomHelpFormatter(prog),
        add_help=False
    )

    # Sub commands
    subparsers = parser.add_subparsers()
    whitelist_parser = subparsers.add_parser("whitelist", help="Whitelist one or more domains")
    blacklist_parser = subparsers.add_parser("blacklist", help="Blacklist one or more domains")
    whitelist_parser.set_defaults(func=choice_whitelist)
    blacklist_parser.set_defaults(func=choice_blacklist)

    whitelist_parser.add_argument("domains", help="domain(s) to add or remove",
                                  nargs="*", metavar="domain")
    whitelist_group = whitelist_parser.add_mutually_exclusive_group()
    whitelist_group.add_argument("-d", "--delete", help="Delete domain(s) from whitelist",
                                 action="store_true")
    whitelist_group.add_argument("-l", "--list", help="List domains in whitelist",
                                 action="store_true")

    blacklist_parser.add_argument("domains", help="domain(s) to add or remove",
                                  nargs="*", metavar="domain")

    # Simple commands
    group = parser.add_mutually_exclusive_group()

    group.add_argument("-h", "--help", help="show this help message and exit",
                       action="store_true")
    group.add_argument("-g", "--gravity", help="update the domain block list",
                       action="store_true")
    group.add_argument("-u", "--update", help="update Pi-hole and/ore the web interface",
                       action="store_true")
    group.add_argument("-f", "--flush", help="flush the log file",
                       action="store_true")
    group.add_argument("-d", "--debug", help="generate a debug log",
                       action="store_true")
    group.add_argument("-l", "--lcd", help="automatically set up an Adafruit 2.8\" TFT LCD",
                       action="store_true")
    group.add_argument("-c", "--chronometer", help="display real-time stats over SSH or on an LCD screen",
                       action="store_true")
    group.add_argument("--uninstall", help="uninstall Pi-hole ;(",
                       action="store_true")

    parser.print_help()
    print("----------------------------------------------")
    whitelist_parser.print_help()
    print("----------------------------------------------")
    print(whitelist_parser.parse_args(["-l", "example.com", "example2.com"]))
    exit()
    options = parser.parse_args()

    # Make sure at least one option has been chosen
    options_dict = vars(options)
    for key in options_dict.keys():
        if options_dict[key] not in [False, None]:
            break
    # Otherwise, print the help
    else:
        parser.print_help()
        exit()

    # Pi-hole Computer Access Retrieval System
    if options.help:
        parser.print_help()
    elif options.update:
        choice_update()
    elif options.uninstall:
        choice_uninstall()
    elif options.gravity:
        choice_gravity()
    elif options.whitelist:
        choice_whitelist()
    elif options.blacklist:
        choice_blacklist()
    elif options.flush:
        choice_flush()
    elif options.lcd():
        choice_lcd()
    elif options.chronometer:
        choice_chronometer()


if __name__ == "__main__":
    main()
