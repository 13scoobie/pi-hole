#!/usr/bin/env python3
# Copyright (c) 2016 Jacob Salmela
# Pi-hole: a DNS based ad-blocker [https://www.pi-hole.net]
#
# Provide a command line interface for using Pi-hole
#
# The Pi-Hole is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.


# DOCOPT


"""Usage: pihole <command> [<args>...]

Commands:
    gravity     Starts up Pi-hole's ad-blocking gravity
    whitelist   Whitelist domain(s)
    blacklist   Blacklist domain(s)
    updateCore  Update Pi-hole Core
    updateWeb   Update Pi-hole Web Interface
    flush       Flush the DNS log
    debug       Generate a new debug log
    help        Show corresponding help
    uninstall   Uninstall Pi-hole ;(

See 'pihole help [command]' for more information on a specific command"""


# IMPORTS


import pihole_vars
import gravity
import whitelist
import blacklist
import updateCore
import updateWeb
import flush
import debug
import uninstall
from docopt import docopt
import os


# SCRIPT


def main():
    # Check for root access
    if os.geteuid() != 0:
        print("This requires root access")
        exit()

    arguments = docopt(__doc__, version=pihole_vars.version, options_first=True)
    print("Global Args:\n" + str(arguments))
    print("Command Args:")

    com = arguments['<command>']
    com_args = [com] + arguments["<args>"]

    if com == "gravity":
        gravity.main(com_args)
    elif com == "whitelist":
        whitelist.main(com_args)
    elif com == "blacklist":
        blacklist.main(com_args)
    elif com == "updateCore":
        updateCore.main(com_args)
    elif com == "updateWeb":
        updateWeb.main(com_args)
    elif com == "flush":
        flush.main(com_args)
    elif com == "debug":
        debug.main(com_args)
    elif com == "uninstall":
        uninstall.main(com_args)
    elif com == "help":
        args = arguments["<args>"]
        if len(args) == 0:
            print(__doc__)
        elif args[0] == "gravity":
            print(gravity.__doc__)
        elif args[0] == "whitelist":
            print(whitelist.__doc__)
        elif args[0] == "blacklist":
            print(blacklist.__doc__)
        elif args[0] == "updateCore":
            print(updateCore.__doc__)
        elif args[0] == "updateWeb":
            print(updateWeb.__doc__)
        elif args[0] == "flush":
            print(flush.__doc__)
        elif args[0] == "debug":
            print(debug.__doc__)
        elif args[0] == "uninstall":
            print(uninstall.__doc__)
        else:
            print('Could not find help for "' + args[0] + '"')
    else:
        print("Unknown command")

if __name__ == "__main__":
    main()
