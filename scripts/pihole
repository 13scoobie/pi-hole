#!/usr/bin/env python3
# Pi-hole: A black hole for Internet advertisements
# (c) 2015, 2016 by Jacob Salmela
# Network-wide ad blocking via your Raspberry Pi
# http://pi-hole.net
# Pi-hole controller
#
# Pi-hole is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.


# IMPORTS


import sys
import argparse
import os
import subprocess
import pihole_vars
import gravity
import updatePihole
import updateDashboard
import whitelist
import blacklist
import debug
import flush
import chronometer
import setupLCD


# FUNCTIONS


# Credit for this class: http://stackoverflow.com/a/31124505
class CustomHelpFormatter(argparse.HelpFormatter):
    def _format_action_invocation(self, action):
        if not action.option_strings or action.nargs == 0:
            return super()._format_action_invocation(action)
        default = self._get_default_metavar_for_optional(action)
        args_string = self._format_args(action, default)
        return ', '.join(action.option_strings) + ' ' + args_string


def choice_help(context):
    pass


def choice_update():
    updatePihole.main()
    updateDashboard.main()


def choice_uninstall():
    pass


def choice_gravity():
    gravity.main()


def choice_whitelist(domains):
    whitelist.main()


def choice_blacklist(domains):
    blacklist.main()


def choice_flush():
    flush.main()


def choice_lcd():
    setupLCD.main()


def choice_chronometer():
    chronometer.main()


def main():
    # Sub-space scanners to parse arguments
    parser = argparse.ArgumentParser(
        description="Control Pi-hole from a single command",
        epilog="(c) 2014-2016 by Jacob Salmela.  http://jacobsalmela.com",
        formatter_class=lambda prog: CustomHelpFormatter(prog),
        add_help=False
    )
    group = parser.add_mutually_exclusive_group()

    group.add_argument("-h", "--help", help="show the corresponding help message and exit",
                       nargs="?", metavar="command")
    group.add_argument("-g", "--gravity", help="update the domain block list",
                       action="store_true")
    group.add_argument("-w", "--whitelist", help="whitelist one or more domains",
                       nargs="*", metavar="domain")
    group.add_argument("-b", "--blacklist", help="blacklist one or more domains",
                       nargs="*", metavar="domain")
    group.add_argument("-u", "--update", help="update Pi-hole and/ore the web interface",
                       action="store_true")
    group.add_argument("-f", "--flush", help="flush the log file",
                       action="store_true")
    group.add_argument("-d", "--debug", help="generate a debug log",
                       action="store_true")
    group.add_argument("-l", "--lcd", help="automatically set up an Adafruit 2.8\" TFT LCD",
                       action="store_true")
    group.add_argument("-c", "--chronometer", help="display real-time stats over SSH or on an LCD screen",
                       action="store_true")
    group.add_argument("--uninstall", help="uninstall Pi-hole ;(",
                       action="store_true")

    options = parser.parse_args()

    # Make sure at least one option has been chosen
    options_dict = vars(options)
    for key in options_dict.keys():
        if options_dict[key] not in [False, None] or type(options_dict[key]) is list:
            break
    # Otherwise, print the help
    else:
        parser.print_help()
        exit()

    # Pi-hole Computer Access Retrieval System
    if options.help is not None:
        choice_help(options.help)
    elif options.update:
        choice_update()
    elif options.uninstall:
        choice_uninstall()
    elif options.gravity:
        choice_gravity()
    elif options.whitelist is not None:
        choice_whitelist(options.whitelist)
    elif options.blacklist is not None:
        choice_blacklist(options.blacklist)
    elif options.flush:
        choice_flush()
    elif options.lcd():
        choice_lcd()
    elif options.chronometer:
        choice_chronometer()


if __name__ == "__main__":
    main()
